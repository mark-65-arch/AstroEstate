---
export interface Props {
  lang: 'en' | 'es';
}

const { lang } = Astro.props;

const translations = {
  en: {
    home: 'Home',
    services: 'Services', 
    contact: 'Contact',
    language: 'Espa√±ol',
    phone: '(713) 903-7178',
    email: 'mrsoldtx@gmail.com'
  },
  es: {
    home: 'Inicio',
    services: 'Servicios',
    contact: 'Contacto',
    language: 'English',
    phone: '(713) 903-7178',
    email: 'mrsoldtx@gmail.com'
  }
};

const t = translations[lang];
// const currentPath = Astro.url.pathname;
const baseUrl = import.meta.env.BASE_URL;
const switchedPath = lang === 'en' ? `${baseUrl}es` : `${baseUrl}en`;
---

<header id="main-header" class="sticky top-0 z-50 navbar-transparent transition-all duration-300">
  <nav class="container-custom">
    <div class="flex justify-between items-center py-4 transition-all duration-300" id="nav-content">
      <!-- Logo -->
      <div class="flex items-center">
        <a href={lang === 'en' ? `${baseUrl}en` : `${baseUrl}es`} class="flex items-center space-x-2 sm:space-x-3 transition-colors duration-300" id="logo">
          <!-- Logo Placeholder -->
          <div class="w-8 h-8 sm:w-10 sm:h-10 rounded-lg flex items-center justify-center logo-bg">
            <span class="font-bold text-xs sm:text-sm logo-text">MS</span>
          </div>
          <div class="flex flex-col">
            <span class="text-base sm:text-xl font-bold logo-text">Mr. Sold Real Estate</span>
            <span class="text-xs font-normal logo-subtext hidden sm:block">L.L.C.</span>
          </div>
        </a>
      </div>
      
      <!-- Mobile Controls (Hamburger + Language Switcher) -->
      <div class="flex items-center space-x-3 sm:flex md:hidden">
        <!-- Mobile Menu Button -->
        <button id="mobile-menu-toggle" class="p-2 focus:outline-none transition-all duration-300 text-white hover:bg-white/10 rounded-md relative cursor-pointer" data-menu-button aria-expanded="false" aria-controls="mobile-menu" aria-label="Toggle mobile menu">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
        <!-- Language Switcher for Mobile -->
        <a href={switchedPath} class="bg-white/20 hover:bg-white/30 text-white font-semibold py-2 px-2 rounded transition-all duration-200 text-sm backdrop-blur-sm" id="lang-switcher-mobile">
          {t.language}
        </a>
      </div>

      <!-- Prominent Phone CTA (Desktop Only) -->
      <div class="hidden lg:flex items-center space-x-4">
        <a href="tel:713-903-7178" class="bg-teal-500 hover:bg-teal-600 text-white px-4 lg:px-6 py-2 lg:py-3 rounded-lg font-bold text-sm lg:text-lg transition-all duration-200 transform hover:scale-105 shadow-lg hover:shadow-xl flex items-center space-x-2">
          <svg class="w-4 h-4 lg:w-5 lg:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
          </svg>
          <span class="hidden xl:inline">{t.phone}</span>
          <span class="xl:hidden">Call</span>
        </a>
        <a href="mailto:mrsoldtx@gmail.com" class="transition-colors flex items-center space-x-1 contact-link text-xs lg:text-sm">
          <span>‚úâÔ∏è</span>
          <span class="hidden xl:inline">{t.email}</span>
        </a>
      </div>

      <!-- Desktop Navigation Links -->
      <div class="hidden md:flex items-center space-x-4 lg:space-x-8" id="nav-links">
        <a href={lang === 'en' ? `${baseUrl}en` : `${baseUrl}es`} class="font-medium transition-colors duration-300 nav-link text-sm lg:text-base">
          {t.home}
        </a>
        <a href={lang === 'en' ? `${baseUrl}en/services` : `${baseUrl}es/services`} class="font-medium transition-colors duration-300 nav-link text-sm lg:text-base">
          {t.services}
        </a>
        <a href={lang === 'en' ? `${baseUrl}en/contact` : `${baseUrl}es/contact`} class="font-medium transition-colors duration-300 nav-link text-sm lg:text-base">
          {t.contact}
        </a>
      </div>

      <!-- Desktop Language Switcher -->
      <div class="hidden md:flex items-center">
        <a href={switchedPath} class="bg-white/20 hover:bg-white/30 text-white font-semibold py-2 px-3 lg:px-4 rounded-lg transition-all duration-200 text-xs lg:text-sm backdrop-blur-sm" id="lang-switcher">
          {t.language}
        </a>
      </div>
    </div>

    <!-- Mobile Menu Overlay (Hidden by default) -->
    <div id="mobile-menu" class="md:hidden fixed inset-0 z-[60] hidden" aria-hidden="true" role="dialog" aria-modal="true" aria-labelledby="mobile-menu-title">
      <!-- Backdrop -->
      <div id="mobile-menu-backdrop" class="fixed inset-0 h-screen w-full bg-black/50 backdrop-blur-sm opacity-0 transition-opacity duration-300 ease-in-out cursor-pointer"></div>
      
      <!-- Menu Panel -->
      <div id="mobile-menu-panel" class="fixed inset-y-0 right-0 w-full max-w-sm bg-white/80 backdrop-blur-md shadow-lg transform translate-x-full transition-transform duration-300 ease-in-out">
        <div class="flex flex-col h-full">
          <!-- Menu Header -->
          <div class="flex items-center justify-between p-6 border-b border-gray-800/20">
            <h2 id="mobile-menu-title" class="text-lg font-semibold text-gray-800">Menu</h2>
            <button id="mobile-menu-close" class="p-2 -mr-2 text-gray-800 hover:text-primary-600 focus:outline-none focus:ring-2 focus:ring-primary-500 rounded-md" aria-label="Close menu">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <!-- Menu Content -->
          <div class="flex-1 p-6 space-y-6">
            <nav class="space-y-4">
              <a href={lang === 'en' ? `${baseUrl}en` : `${baseUrl}es`} class="block text-lg font-medium text-gray-800 hover:text-primary-600 transition-colors duration-200 mobile-nav-link py-2">
                {t.home}
              </a>
              <a href={lang === 'en' ? `${baseUrl}en/services` : `${baseUrl}es/services`} class="block text-lg font-medium text-gray-800 hover:text-primary-600 transition-colors duration-200 mobile-nav-link py-2">
                {t.services}
              </a>
              <a href={lang === 'en' ? `${baseUrl}en/contact` : `${baseUrl}es/contact`} class="block text-lg font-medium text-gray-800 hover:text-primary-600 transition-colors duration-200 mobile-nav-link py-2">
                {t.contact}
              </a>
            </nav>
            
            <!-- Mobile Contact Info -->
            <div class="pt-6 border-t border-gray-800/20 space-y-4">
              <a href="tel:713-903-7178" class="block w-full bg-teal-500 hover:bg-teal-600 text-white px-4 py-3 rounded-lg font-bold text-center transition-all duration-200 transform hover:scale-105 shadow-lg">
                üìû {t.phone}
              </a>
              <a href="mailto:mrsoldtx@gmail.com" class="block w-full bg-gray-800/10 hover:bg-gray-800/20 text-gray-800 px-4 py-3 rounded-lg font-medium text-center transition-colors duration-200">
                ‚úâÔ∏è {t.email}
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </nav>
</header>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const header = document.getElementById('main-header');
    // const logo = document.getElementById('logo');
    // const navLinks = document.querySelectorAll('.nav-link');
    // const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
    const langSwitcher = document.getElementById('lang-switcher');
    // const menuButton = document.querySelector('[data-menu-button]');
    const toggleButton = document.getElementById('mobile-menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    
    // Scroll behavior for navbar
    function updateNavbar() {
      const scrollY = window.scrollY;
      const isScrolled = scrollY > 50;
      
      if (header) {
        if (isScrolled) {
          header.classList.remove('navbar-transparent');
          header.classList.add('navbar-solid');
          
          // Update language switcher
          if (langSwitcher) {
            langSwitcher.className = 'bg-primary hover:opacity-90 text-white font-semibold py-2 px-4 rounded-lg transition-all duration-200 text-sm';
          }
        } else {
          header.classList.remove('navbar-solid');
          header.classList.add('navbar-transparent');
          
          // Update language switcher  
          if (langSwitcher) {
            langSwitcher.className = 'bg-white/20 hover:bg-white/30 text-white font-semibold py-2 px-4 rounded-lg transition-all duration-200 text-sm backdrop-blur-sm';
          }
        }
      }
    }
    
    // Detect if page has a hero section
    function initializeNavbar() {
      const heroSection = document.querySelector('.hero-section');
      if (heroSection) {
        document.body.classList.add('has-hero');
      } else {
        document.body.classList.add('no-hero');
        // For pages without hero, start with solid navbar
        if (header) {
          header.classList.remove('navbar-transparent');
          header.classList.add('navbar-solid');
        }
      }
      updateNavbar();
    }
    
    // Mobile menu functionality
    if (toggleButton && mobileMenu) {
      console.log('Mobile menu toggle button found and event listener added');
      
      // Ensure menu starts hidden
      mobileMenu.classList.add('hidden');
      mobileMenu.setAttribute('aria-hidden', 'true');
      
      const backdrop = document.getElementById('mobile-menu-backdrop');
      const closeButton = document.getElementById('mobile-menu-close');
      const menuPanel = document.getElementById('mobile-menu-panel');
      let previousFocus: Element | null = null;
      
      function openMenu() {
        // Save current focus
        previousFocus = document.activeElement;
        
        // Show menu
        if (mobileMenu) {
          mobileMenu.classList.remove('hidden');
          mobileMenu.setAttribute('aria-hidden', 'false');
        }
        if (toggleButton) {
          toggleButton.setAttribute('aria-expanded', 'true');
        }
        document.body.style.overflow = 'hidden';
        
        // Hide other content from screen readers
        const mainContent = document.querySelector('main');
        const headerContent = document.querySelector('#nav-content');
        if (mainContent) mainContent.setAttribute('aria-hidden', 'true');
        if (headerContent) headerContent.setAttribute('aria-hidden', 'true');
        
        // Trigger animations
        requestAnimationFrame(() => {
          if (backdrop) backdrop.classList.remove('opacity-0');
          if (menuPanel) menuPanel.classList.remove('translate-x-full');
        });
        
        // Focus management
        setTimeout(() => {
          if (closeButton) closeButton.focus();
        }, 100);
        
        console.log('Menu opened');
      }
      
      function closeMenu() {
        // Start animations
        if (backdrop) backdrop.classList.add('opacity-0');
        if (menuPanel) menuPanel.classList.add('translate-x-full');
        
        // Wait for animation to complete
        setTimeout(() => {
          if (mobileMenu) {
            mobileMenu.classList.add('hidden');
            mobileMenu.setAttribute('aria-hidden', 'true');
          }
          if (toggleButton) {
            toggleButton.setAttribute('aria-expanded', 'false');
          }
          document.body.style.overflow = '';
          
          // Restore other content visibility
          const mainContent = document.querySelector('main');
          const headerContent = document.querySelector('#nav-content');
          if (mainContent) mainContent.removeAttribute('aria-hidden');
          if (headerContent) headerContent.removeAttribute('aria-hidden');
          
          // Restore focus
          if (previousFocus && 'focus' in previousFocus) {
            (previousFocus as HTMLElement).focus();
            previousFocus = null;
          }
        }, 300);
        
        console.log('Menu closed');
      }
      
      // Toggle button click
      toggleButton.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        console.log('Mobile menu button clicked');
        
        const isCurrentlyHidden = mobileMenu.classList.contains('hidden');
        const ariaExpanded = toggleButton.getAttribute('aria-expanded') === 'true';
        console.log('Menu state - hidden class:', isCurrentlyHidden, 'aria-expanded:', ariaExpanded);
        
        if (isCurrentlyHidden) {
          console.log('Opening menu');
          openMenu();
        } else {
          console.log('Closing menu');
          closeMenu();
        }
      });
      
      // Close button click
      if (closeButton) {
        closeButton.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          closeMenu();
        });
      }
      
      // Backdrop click (click outside to close)
      if (backdrop) {
        backdrop.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          console.log('Backdrop clicked - closing menu');
          closeMenu();
        });
      }
      
      // Close menu when clicking on navigation links
      const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
      mobileNavLinks.forEach(link => {
        link.addEventListener('click', function() {
          console.log('Navigation link clicked - closing menu');
          closeMenu();
        });
      });
      
      // Keyboard event handling
      document.addEventListener('keydown', function(e) {
        if (mobileMenu.classList.contains('hidden')) return;
        
        if (e.key === 'Escape') {
          console.log('Escape key pressed - closing menu');
          closeMenu();
          return;
        }
        
        // Focus trap
        if (e.key === 'Tab') {
          const focusableElements = mobileMenu.querySelectorAll(
            'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
          );
          
          if (focusableElements.length === 0) return;
          
          const firstFocusable = focusableElements[0] as HTMLElement;
          const lastFocusable = focusableElements[focusableElements.length - 1] as HTMLElement;
          
          if (e.shiftKey) {
            // Shift + Tab
            if (document.activeElement === firstFocusable) {
              e.preventDefault();
              lastFocusable?.focus();
            }
          } else {
            // Tab
            if (document.activeElement === lastFocusable) {
              e.preventDefault();
              firstFocusable?.focus();
            }
          }
        }
      });
      
    } else {
      console.log('Mobile menu elements not found:', {
        toggleButton: !!toggleButton,
        mobileMenu: !!mobileMenu
      });
    }
    
    // Listen for scroll events
    window.addEventListener('scroll', updateNavbar);
    
    // Initialize navbar based on page content
    initializeNavbar();
  });
</script>