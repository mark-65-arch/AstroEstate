---
export interface Props {
  lang: 'en' | 'es';
}

const { lang } = Astro.props;

const translations = {
  en: {
    home: 'Home',
    services: 'Services', 
    contact: 'Contact',
    language: 'Español',
    phone: '(713) 903-7178',
    email: 'mrsoldtx@gmail.com'
  },
  es: {
    home: 'Inicio',
    services: 'Servicios',
    contact: 'Contacto',
    language: 'English',
    phone: '(713) 903-7178',
    email: 'mrsoldtx@gmail.com'
  }
};

const t = translations[lang];
const currentPath = Astro.url.pathname;
const baseUrl = import.meta.env.BASE_URL;
const switchedPath = lang === 'en' ? `${baseUrl}es` : `${baseUrl}en`;
---

<header id="main-header" class="navbar-sticky navbar-transparent">
  <nav class="container-custom">
    <div class="flex justify-between items-center py-4 transition-all duration-300" id="nav-content">
      <!-- Logo -->
      <div class="flex items-center">
        <a href={lang === 'en' ? `${baseUrl}en` : `${baseUrl}es`} class="flex items-center space-x-3 transition-colors duration-300" id="logo">
          <!-- Logo Placeholder -->
          <div class="w-10 h-10 rounded-lg flex items-center justify-center logo-bg">
            <span class="font-bold text-sm logo-text">MS</span>
          </div>
          <div class="flex flex-col">
            <span class="text-xl font-bold logo-text">Mr. Sold Real Estate</span>
            <span class="text-xs font-normal logo-subtext">L.L.C.</span>
          </div>
        </a>
      </div>
      
      <!-- Mobile Controls (Hamburger + Language Switcher) -->
      <div class="flex items-center space-x-3 md:hidden">
        <!-- Mobile Menu Button -->
        <button id="mobile-menu-toggle" class="p-2 focus:outline-none transition-colors duration-300 text-white hover:bg-white/10 rounded-md" data-menu-button>
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
        <!-- Language Switcher for Mobile -->
        <a href={switchedPath} class="bg-white/20 hover:bg-white/30 text-white font-semibold py-2 px-3 rounded-lg transition-all duration-200 text-sm backdrop-blur-sm" id="lang-switcher-mobile">
          {t.language}
        </a>
      </div>

      <!-- Prominent Phone CTA (Desktop Only) -->
      <div class="hidden lg:flex items-center space-x-4">
        <a href="tel:713-903-7178" class="bg-teal-500 hover:bg-teal-600 text-white px-6 py-3 rounded-lg font-bold text-lg transition-all duration-200 transform hover:scale-105 shadow-lg hover:shadow-xl flex items-center space-x-2">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
          </svg>
          <span>{t.phone}</span>
        </a>
        <a href="mailto:mrsoldtx@gmail.com" class="transition-colors flex items-center space-x-1 contact-link text-sm">
          <span>✉️</span>
          <span>{t.email}</span>
        </a>
      </div>

      <!-- Desktop Navigation Links -->
      <div class="hidden md:flex items-center space-x-8" id="nav-links">
        <a href={lang === 'en' ? `${baseUrl}en` : `${baseUrl}es`} class="font-medium transition-colors duration-300 nav-link">
          {t.home}
        </a>
        <a href={lang === 'en' ? `${baseUrl}en/services` : `${baseUrl}es/services`} class="font-medium transition-colors duration-300 nav-link">
          {t.services}
        </a>
        <a href={lang === 'en' ? `${baseUrl}en/contact` : `${baseUrl}es/contact`} class="font-medium transition-colors duration-300 nav-link">
          {t.contact}
        </a>
      </div>

      <!-- Desktop Language Switcher -->
      <div class="hidden md:flex items-center">
        <a href={switchedPath} class="bg-white/20 hover:bg-white/30 text-white font-semibold py-2 px-4 rounded-lg transition-all duration-200 text-sm backdrop-blur-sm" id="lang-switcher">
          {t.language}
        </a>
      </div>
    </div>

    <!-- Mobile Menu (Hidden by default) -->
    <div id="mobile-menu" class="md:hidden hidden border-t border-white/20 pt-4 pb-4" style="display: none;">
      <div class="flex flex-col space-y-4">
        <a href={lang === 'en' ? `${baseUrl}en` : `${baseUrl}es`} class="font-medium transition-colors mobile-nav-link">
          {t.home}
        </a>
        <a href={lang === 'en' ? `${baseUrl}en/services` : `${baseUrl}es/services`} class="font-medium transition-colors mobile-nav-link">
          {t.services}
        </a>
        <a href={lang === 'en' ? `${baseUrl}en/contact` : `${baseUrl}es/contact`} class="font-medium transition-colors mobile-nav-link">
          {t.contact}
        </a>
      </div>
    </div>
  </nav>
</header>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const header = document.getElementById('main-header');
    const logo = document.getElementById('logo');
    const navLinks = document.querySelectorAll('.nav-link');
    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
    const langSwitcher = document.getElementById('lang-switcher');
    const menuButton = document.querySelector('[data-menu-button]');
    const toggleButton = document.getElementById('mobile-menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    
    // Scroll behavior for navbar
    function updateNavbar() {
      const scrollY = window.scrollY;
      const isScrolled = scrollY > 50;
      
      if (header) {
        if (isScrolled) {
          header.classList.remove('navbar-transparent');
          header.classList.add('navbar-solid');
          
          // Update language switcher
          if (langSwitcher) {
            langSwitcher.className = 'bg-primary hover:opacity-90 text-white font-semibold py-2 px-4 rounded-lg transition-all duration-200 text-sm';
          }
        } else {
          header.classList.remove('navbar-solid');
          header.classList.add('navbar-transparent');
          
          // Update language switcher  
          if (langSwitcher) {
            langSwitcher.className = 'bg-white/20 hover:bg-white/30 text-white font-semibold py-2 px-4 rounded-lg transition-all duration-200 text-sm backdrop-blur-sm';
          }
        }
      }
    }
    
    // Detect if page has a hero section
    function initializeNavbar() {
      const heroSection = document.querySelector('.hero-section');
      if (heroSection) {
        document.body.classList.add('has-hero');
      } else {
        document.body.classList.add('no-hero');
        // For pages without hero, start with solid navbar
        if (header) {
          header.classList.remove('navbar-transparent');
          header.classList.add('navbar-solid');
        }
      }
      updateNavbar();
    }
    
    // Mobile menu toggle
    if (toggleButton && mobileMenu) {
      console.log('Mobile menu toggle button found and event listener added');
      toggleButton.addEventListener('click', function(e) {
        e.preventDefault();
        console.log('Mobile menu button clicked');
        
        const isCurrentlyHidden = mobileMenu.style.display === 'none' || mobileMenu.classList.contains('hidden');
        console.log('Menu before toggle:', isCurrentlyHidden ? 'hidden' : 'visible');
        
        if (isCurrentlyHidden) {
          // Show menu
          mobileMenu.style.display = 'block';
          mobileMenu.classList.remove('hidden');
          toggleButton.setAttribute('aria-expanded', 'true');
          console.log('Menu shown');
        } else {
          // Hide menu
          mobileMenu.style.display = 'none';
          mobileMenu.classList.add('hidden');
          toggleButton.setAttribute('aria-expanded', 'false');
          console.log('Menu hidden');
        }
      });
    } else {
      console.log('Mobile menu elements not found:', {
        toggleButton: !!toggleButton,
        mobileMenu: !!mobileMenu
      });
    }
    
    // Listen for scroll events
    window.addEventListener('scroll', updateNavbar);
    
    // Initialize navbar based on page content
    initializeNavbar();
  });
</script>