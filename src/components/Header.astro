---
export interface Props {
  lang: 'en' | 'es';
}

const { lang } = Astro.props;

const translations = {
  en: {
    home: 'Home',
    services: 'Services', 
    contact: 'Contact',
    language: 'Espa√±ol'
  },
  es: {
    home: 'Inicio',
    services: 'Servicios',
    contact: 'Contacto',
    language: 'English'
  }
};

const t = translations[lang];
const currentPath = Astro.url.pathname;
const switchedPath = lang === 'en' ? `/es${currentPath.replace('/en', '')}` : currentPath.replace('/es', '/en');
---

<header id="main-header" class="navbar-sticky navbar-transparent">
  <nav class="container-custom">
    <div class="flex justify-between items-center py-4 transition-all duration-300" id="nav-content">
      <!-- Logo -->
      <div class="flex items-center">
        <a href={lang === 'en' ? '/en' : '/es'} class="text-2xl font-bold text-white transition-colors duration-300" id="logo">
          RealEstate Pro
        </a>
      </div>
      
      <!-- Mobile Menu Button -->
      <div class="md:hidden">
        <button id="mobile-menu-toggle" class="text-white hover:text-teal-300 focus:outline-none transition-colors duration-300" data-menu-button>
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>

      <!-- Desktop Navigation Links -->
      <div class="hidden md:flex items-center space-x-8" id="nav-links">
        <a href={lang === 'en' ? '/en' : '/es'} class="text-white hover:text-teal-300 font-medium transition-colors duration-300 nav-link">
          {t.home}
        </a>
        <a href={lang === 'en' ? '/en/services' : '/es/services'} class="text-white hover:text-teal-300 font-medium transition-colors duration-300 nav-link">
          {t.services}
        </a>
        <a href={lang === 'en' ? '/en/contact' : '/es/contact'} class="text-white hover:text-teal-300 font-medium transition-colors duration-300 nav-link">
          {t.contact}
        </a>
      </div>

      <!-- Language Switcher -->
      <div class="flex items-center">
        <a href={switchedPath} class="bg-white/20 hover:bg-white/30 text-white font-semibold py-2 px-4 rounded-lg transition-all duration-200 text-sm backdrop-blur-sm" id="lang-switcher">
          {t.language}
        </a>
      </div>
    </div>

    <!-- Mobile Menu (Hidden by default) -->
    <div id="mobile-menu" class="md:hidden hidden border-t border-white/20 pt-4 pb-4">
      <div class="flex flex-col space-y-4">
        <a href={lang === 'en' ? '/en' : '/es'} class="text-white hover:text-teal-300 font-medium transition-colors mobile-nav-link">
          {t.home}
        </a>
        <a href={lang === 'en' ? '/en/services' : '/es/services'} class="text-white hover:text-teal-300 font-medium transition-colors mobile-nav-link">
          {t.services}
        </a>
        <a href={lang === 'en' ? '/en/contact' : '/es/contact'} class="text-white hover:text-teal-300 font-medium transition-colors mobile-nav-link">
          {t.contact}
        </a>
      </div>
    </div>
  </nav>
</header>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const header = document.getElementById('main-header');
    const logo = document.getElementById('logo');
    const navLinks = document.querySelectorAll('.nav-link');
    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
    const langSwitcher = document.getElementById('lang-switcher');
    const menuButton = document.querySelector('[data-menu-button]');
    const toggleButton = document.getElementById('mobile-menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    
    // Scroll behavior for navbar
    function updateNavbar() {
      const scrollY = window.scrollY;
      const isScrolled = scrollY > 50;
      
      if (header) {
        if (isScrolled) {
          header.classList.remove('navbar-transparent');
          header.classList.add('navbar-solid');
          
          // Update language switcher
          if (langSwitcher) {
            langSwitcher.className = 'bg-teal-100 hover:bg-teal-200 text-teal-700 font-semibold py-2 px-4 rounded-lg transition-all duration-200 text-sm';
          }
        } else {
          header.classList.remove('navbar-solid');
          header.classList.add('navbar-transparent');
          
          // Update language switcher
          if (langSwitcher) {
            langSwitcher.className = 'bg-white/20 hover:bg-white/30 text-white font-semibold py-2 px-4 rounded-lg transition-all duration-200 text-sm backdrop-blur-sm';
          }
        }
      }
    }
    
    // Detect if page has a hero section
    function initializeNavbar() {
      const heroSection = document.querySelector('.hero-section');
      if (heroSection) {
        document.body.classList.add('has-hero');
      } else {
        document.body.classList.add('no-hero');
        // For pages without hero, start with solid navbar
        if (header) {
          header.classList.remove('navbar-transparent');
          header.classList.add('navbar-solid');
        }
      }
      updateNavbar();
    }
    
    // Mobile menu toggle
    if (toggleButton && mobileMenu) {
      toggleButton.addEventListener('click', function() {
        mobileMenu.classList.toggle('hidden');
        
        // Update ARIA attributes for accessibility
        const isExpanded = !mobileMenu.classList.contains('hidden');
        toggleButton.setAttribute('aria-expanded', isExpanded.toString());
      });
    }
    
    // Listen for scroll events
    window.addEventListener('scroll', updateNavbar);
    
    // Initialize navbar based on page content
    initializeNavbar();
  });
</script>